// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

struct Sphere
{
    float yPosition;
    float speed;
    float maxY;
    float minY;
    int index;
    int3 id;
    int3 groupId;
    int3 groupIdThread;
};

float time;
int gridDimx;
int gridDimy;
int gridDimz;
int iterations;

RWStructuredBuffer<Sphere> spheres;
float rand(float2 co)
{
    return frac(sin(dot(co.xy ,float2(12.9898,78.233))) * 43758.5453);
}

[numthreads(16,16,1)]
void CSMain (uint3 id : SV_DispatchThreadID, uint3 gid : SV_GROUPID, uint3 gidthread : SV_GroupThreadID)
{
    int blockDimx = 16;
    int blockDimy = 16;
    int blockDimz = 1;
    

    
    // Te√≥rico
    // int block = blockIdx.x * gridDim.y * gridDim.z + blockIdx.y * gridDim.z + blockIdx.z;
    // int thread = threadIdx.x * blockDim.y * blockDim.z + threadIdx.y * blockDim.z + threadIdx.z;
    // int ind = block * blockDim.x * blockDim.y * blockDim.z + thread;
    
    int block = gid.x * gridDimy * gridDimz + gid.y * gridDimz + gid.z;
    int thread = gidthread.x * blockDimy * blockDimz + gidthread.y * blockDimz + gidthread.z;
    int index = block * blockDimx * blockDimy * blockDimz + thread;
    
    
    Sphere sphere = spheres[index];
    sphere.index = index;
    sphere.id = id;
    sphere.groupId = gid;
    sphere.groupIdThread = gidthread;

    for (int i = 0; i < iterations; i++)
    {
        sphere.index += (sqrt(5000)*sphere.yPosition);
    }

    if(sphere.yPosition >= sphere.maxY)
    {
        // sphere.speed = -(gidthread.x * 0.1) + 0.1; // Mesmo que OpenMP

        // sphere.speed = -((index % 64) * 0.1)  - 0.1; // Mesma que OpenMP
        
        sphere.speed = -rand(float2(10, 50))*0.1 * (block+1);
    }
    else if(sphere.yPosition <= sphere.minY)
    {
        // sphere.speed = (gidthread.x * 0.1) + 0.1; // Mesmo que OpenMP

        // sphere.speed = ((index%64) * 0.1)  - 0.1; // Mesma que OpenMP

        sphere.speed = rand(float2(10, 50))*0.1 * (block+1);
    }

    sphere.yPosition += sphere.speed * time;
    spheres[index] = sphere;
}

